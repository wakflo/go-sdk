// Copyright 2022-present Wakflo
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package autoform

import (
	sdkcore "github.com/wakflo/go-sdk/core"
)

type BranchField struct {
	*BaseComponentField
}

func NewBranchField() *BranchField {
	c := &BranchField{
		BaseComponentField: NewBaseComponentField(),
	}
	c.builder.WithType(sdkcore.Array)
	c.builder.WithFieldType(sdkcore.AutoFormFieldTypeBranch)

	return c
}

func (b *BranchField) Build() *sdkcore.AutoFormSchema {
	b.props = b.setProps().builder.Build()
	return b.props
}

func (b *BranchField) setProps() *BranchField {
	p := NewO
	bjectField().SetProperties(map[string]*sdkcore.AutoFormSchema{
		"value": NewShortTextField().
			SetDisplayName("Value").
			SetDescription("Branch case value").
			SetRequired(true).
			Build(),
		"label": NewShortTextField().
			SetDisplayName("Label").
			SetDescription("Branch label case").
			SetRequired(true).
			Build(),
		"id": NewShortTextField().
			SetDisplayName("ID").
			SetDescription("ID label case").
			SetRequired(false).
			SetHidden(true).
			Build(),
	}).Build()
	b.builder.WithItems(p)
	b.builder.WithOrder([]string{
		"value",
		"label",
	})
	return b
}

func (b *BranchField) SetDefaultValue(defaultValue interface{}) *BranchField {
	b.builder.WithDefault(defaultValue)
	return b
}

func (b *BranchField) SetItems(item *sdkcore.AutoFormSchema) *BranchField {
	if item == nil {
		return b
	}

	if item.Type == sdkcore.Object || item.Type == sdkcore.Array {
		b.builder.WithItems(item)
		return b
	}

	b.builder.WithItems(
		NewObjectField().
			SetLabel(item.Title).
			SetDescription(item.Description).
			SetPlaceholder(item.UIProps.Placeholder).
			SetProperties(map[string]*sdkcore.AutoFormSchema{
				"value": item,
			}).
			Build(),
	)

	return b
}

func (b *BranchField) SetUnique(unique bool) *BranchField {
	b.builder.WithUniqueItems(unique)
	return b
}

// rest
func (b *BranchField) SetDescription(desc string) *BranchField {
	b.builder.WithDescription(desc)
	return b
}

func (b *BranchField) SetDisplayName(title string) *BranchField {
	b.builder.WithTitle(title)
	return b
}

func (b *BranchField) SetRequired(required bool) *BranchField {
	b.Required = required
	b.builder = b.builder.WithFieldRequired(required)
	return b
}

func (b *BranchField) SetDisabled(disabled bool) *BranchField {
	b.builder.props.UIProps.Disabled = disabled
	b.builder.props.Disabled = disabled
	return b
}

func (b *BranchField) SetAnyOf(schemas []*sdkcore.AutoFormSchema) *BranchField {
	b.builder.WithAnyOf(schemas)
	return b
}

func (b *BranchField) SetOneOf(schemas []*sdkcore.AutoFormSchema) *BranchField {
	b.builder.WithOneOf(schemas)
	return b
}

func (b *BranchField) SetAllOf(schemas []*sdkcore.AutoFormSchema) *BranchField {
	b.builder.WithAllOf(schemas)
	return b
}

func (b *BranchField) SetPlaceholder(placeholder string) *BranchField {
	b.builder.props.UIProps.Placeholder = placeholder
	return b
}

func (b *BranchField) SetLabel(label string) *BranchField {
	b.builder.WithTitle(label)
	b.builder.props.UIProps.Label = label
	return b
}

func (b *BranchField) SetHint(hint string) *BranchField {
	b.builder.props.UIProps.Hint = hint
	return b
}

func (b *BranchField) SetHidden(hidden bool) *BranchField {
	b.builder.props.UIProps.Hidden = hidden
	return b
}
