package stepsenum

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"strconv"
)

var (
	ErrNoValidEnum = errors.New("not a valid enum")
)

// IsValid tests whether the value is a valid enum value.
func (_c StepType) IsValid() bool {
	switch _c {
	case Branch:
	case Boolean:
	case Loop:
	case Normal:
	case Condition:
	case Start:
	case End:
		return true
	default:
		return false
	}

	return false
}

// Validate whether the value is within the range of enum values.
func (_c StepType) Validate() error {
	if !_c.IsValid() {
		return fmt.Errorf("StepType(%v) is %w", _c, ErrNoValidEnum)
	}
	return nil
}

// String returns the string of the enum value.
// If the enum value is invalid, it will produce a string
// of the following pattern StepType(%d) instead.
func (_c StepType) String() string {
	return string(_c)
}

var (
	_ConnectorStepTypeStringToValueMap = map[string]StepType{
		"branch":    Branch,
		"boolean":   Boolean,
		"normal":    Normal,
		"loop":      Loop,
		"condition": Condition,
		"start":     Start,
		"end":       End,
	}
	_ConnectorStepTypeLowerStringToValueMap = map[string]StepType{
		"branch":    Branch,
		"boolean":   Boolean,
		"normal":    Normal,
		"loop":      Loop,
		"condition": Condition,
		"start":     Start,
		"end":       End,
	}
)

// ConnectorStepTypeFromString determines the enum value with an exact case match.
func ConnectorStepTypeFromString(raw string) (StepType, bool) {
	v, ok := _ConnectorStepTypeStringToValueMap[raw]
	if !ok {
		return StepType(""), false
	}
	return v, true
}

// ConnectorStepTypeFromStringIgnoreCase determines the enum value with a case-insensitive match.
func ConnectorStepTypeFromStringIgnoreCase(raw string) (StepType, bool) {
	v, ok := ConnectorStepTypeFromString(raw)
	if ok {
		return v, ok
	}
	v, ok = _ConnectorStepTypeLowerStringToValueMap[raw]
	if !ok {
		return StepType(""), false
	}
	return v, true
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for StepType.
func (_c StepType) MarshalBinary() ([]byte, error) {
	if err := _c.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as StepType. %w", _c, err)
	}
	return []byte(_c.String()), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for StepType.
func (_c *StepType) UnmarshalBinary(text []byte) error {
	str := string(text)
	if len(str) == 0 {
		return fmt.Errorf("StepType cannot be derived from empty string")
	}

	var ok bool
	*_c, ok = ConnectorStepTypeFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a StepType", str)
	}
	return nil
}

// MarshalGQL implements the graphql.Marshaler interface for StepType.
func (_c StepType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(_c.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for StepType.
func (_c *StepType) UnmarshalGQL(value interface{}) error {
	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of StepType: %[1]T(%[1]v)", value)
	}
	if len(str) == 0 {
		return fmt.Errorf("StepType cannot be derived from empty string")
	}

	var ok bool
	*_c, ok = ConnectorStepTypeFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a StepType", str)
	}
	return nil
}

// MarshalJSON implements the json.Marshaler interface for StepType.
func (_c StepType) MarshalJSON() ([]byte, error) {
	if err := _c.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as StepType. %w", _c, err)
	}
	return json.Marshal(_c.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for StepType.
func (_c *StepType) UnmarshalJSON(data []byte) error {
	var str string
	if err := json.Unmarshal(data, &str); err != nil {
		return fmt.Errorf("StepType should be a string, got %q", data)
	}
	if len(str) == 0 {
		return fmt.Errorf("StepType cannot be derived from empty string")
	}

	var ok bool
	*_c, ok = ConnectorStepTypeFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a StepType", str)
	}
	return nil
}

// Value implements the sql/driver.Valuer interface for StepType.
func (_c StepType) Value() (driver.Value, error) {
	if err := _c.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot serialize value %q as StepType. %w", _c, err)
	}
	return _c.String(), nil
}

// Scan implements the sql/driver.Scanner interface for StepType.
func (_c *StepType) Scan(value interface{}) error {
	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of StepType: %[1]T(%[1]v)", value)
	}
	if len(str) == 0 {
		return fmt.Errorf("StepType cannot be derived from empty string")
	}

	var ok bool
	*_c, ok = ConnectorStepTypeFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a StepType", str)
	}
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for StepType.
func (_c StepType) MarshalText() ([]byte, error) {
	if err := _c.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as StepType. %w", _c, err)
	}
	return []byte(_c.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for StepType.
func (_c *StepType) UnmarshalText(text []byte) error {
	str := string(text)
	if len(str) == 0 {
		return fmt.Errorf("StepType cannot be derived from empty string")
	}

	var ok bool
	*_c, ok = ConnectorStepTypeFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a StepType", str)
	}
	return nil
}

// MarshalYAML implements a YAML Marshaler for StepType.
func (_c StepType) MarshalYAML() (interface{}, error) {
	if err := _c.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as StepType. %w", _c, err)
	}
	return _c.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for StepType.
func (_c *StepType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	if err := unmarshal(&str); err != nil {
		return err
	}
	if len(str) == 0 {
		return fmt.Errorf("StepType cannot be derived from empty string")
	}

	var ok bool
	*_c, ok = ConnectorStepTypeFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a StepType", str)
	}
	return nil
}

// Values returns a slice of all String values of the enum.
func (StepType) Values() []string {
	return []string{
		"branch",
		"boolean",
		"normal",
		"loop",
		"condition",
		"start",
		"end",
	}
}
